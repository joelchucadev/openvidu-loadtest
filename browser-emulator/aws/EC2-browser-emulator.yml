AWSTemplateFormatVersion: 2010-09-09
Description: Browser Emulator

Parameters:
  ImageId:
    Type: AWS::EC2::Image::Id
    Description: An Amazon EC2 image ID, such as ami-09e67e426f25ce0d7.
    Default: ami-09e67e426f25ce0d7

Resources:
  BrowserInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT45M
        Count: 1
    Properties:
      ImageId: !Ref ImageId
      InstanceType: "t3.small"
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeType: "gp2"
          DeleteOnTermination: "true"
          VolumeSize: "50"
      UserData:
        "Fn::Base64":
          !Sub |
          #!/bin/bash
          set -eu -o pipefail
          # Bash options for strict error checking.
          set -o errexit -o errtrace -o pipefail -o nounset
          shopt -s inherit_errexit 2>/dev/null || true

          # Trace all commands.
          set -o xtrace

          apt-get update
          apt -y upgrade
          command -v python3-pip >/dev/null || {
            apt-get install -y python3-pip
            pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz

          }
          command -v docker >/dev/null || {
            echo "Installing Docker CE"
             apt-get install --no-install-recommends --yes \
                apt-transport-https \
                ca-certificates \
                curl \
                software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
            source /etc/lsb-release # Get Ubuntu version definitions (DISTRIB_CODENAME).
            add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $DISTRIB_CODENAME stable"
            apt-get update && apt-get install --no-install-recommends --yes \
                docker-ce
          }

          git clone https://github.com/OpenVidu/openvidu-loadtest.git /opt/openvidu-loadtest

          cd /opt/openvidu-loadtest/

          # Download media files
          ./browser-emulator/prepare.sh

          # Create browser-emulator docker image
          cd docker/browser-emulator/
          ./run.sh 2.2.0

          # Pull images used by browser-emulator for faster initialization time
          docker pull elastestbrowsers/chrome
          docker pull docker.elastic.co/beats/metricbeat-oss:7.12.0
          docker pull kurento/kurento-media-server:latest

          # Create recording directories
          mkdir -p ./recordings/kms
          mkdir -p ./recordings/chrome
          mkdir -p ./recordings/qoe

          echo '@reboot docker run -d -it --network host -v /var/run/docker.sock:/var/run/docker.sock -v /opt/openvidu-loadtest/browser-emulator/recordings:/opt/openvidu-loadtest/browser-emulator/recordings -v /opt/openvidu-loadtest/browser-emulator/src/assets/mediafiles:/opt/openvidu-loadtest/browser-emulator/src/assets/mediafiles openvidu/browser-emulator:2.2.0 > /var/log/crontab.log' | crontab

          # sending the finish call
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource BrowserInstance --region ${AWS::Region}